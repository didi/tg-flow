/**
 * This file is auto-generated by dirpcgen don't modify manaully
 *
 * Copyright (c) 2018 didichuxing.com, Inc. All Rights Reserved
 *
 * Generated-date: 2018-07-13
 */

package controller

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/didi/tg-flow/tg-core/common/tlog"
	"github.com/didi/tg-flow/tg-core/common/utils"
	"net/http"
	"strconv"
	"tg-service/common/logs"
	"tg-service/idl"
	"tg-service/logic"
	"tg-service/logic/workflowadmin"
)

//查询workflow信息
func (h RPCService) SearchWorkFlow(w http.ResponseWriter, r *http.Request) {
	defer utils.Recover(context.TODO(), nil, logs.DLTagSystemPanic, "controller.SearchWorkFlow")
	data, err := logic.ParsRequsetWorkFlowParam(r)
	tlog.Handler.Infof(context.TODO(), logs.DLTagProcessLog, "etype=controller.SearchWorkFlow||data=%v||err=%v", data, err)
	if err != nil {
		workFlowList := make([]*idl.WorkFlowConfig, 0)
		logic.EchoJSON(w, r, workFlowList)
	} else {
		if data.Operator == "" {
			ReturnLoginFailMessage(w, r)
		} else {
			pageLimit, pageNum := logic.ParsRequestPageParam(r)
			useLimit := false
			if pageLimit != 0 && pageNum != 0 {
				useLimit = true
			}
			workFlowList, _ := workflowadmin.SelectWorkFlowConfig(data, pageLimit, pageNum, useLimit)
			ReturnLoginSuccessMsg(w, r, workFlowList)
		}
	}
}

//新增和修改workflow信息
func (h RPCService) AddOrUpdateWorkFlow(w http.ResponseWriter, r *http.Request) {
	defer utils.Recover(context.TODO(), nil, logs.DLTagSystemPanic, "controller.AddOrUpdateWorkFlow")

	data, err := logic.ParsRequsetWorkFlowParam(r)

	tlog.Handler.Infof(context.TODO(), logs.DLTagProcessLog, "etype=controller.AddOrUpdateWorkFlow||data=%v||err=%v", data, err)

	if err != nil {
		logic.EchoJSON(w, r, &idl.ResponseInfo{Tag: false, ErrMsg: err.Error()})
	} else {
		if data.Operator == "" {
			ReturnLoginFailMessage(w, r)
		} else {
			logic.EchoJSON(w, r, workflowadmin.AddOrUpdateWorkFlowConfig(data))
		}
	}
}

//删除workflow信息
func (h RPCService) DeleteWorkFlow(w http.ResponseWriter, r *http.Request) {
	defer utils.Recover(context.TODO(), nil, logs.DLTagSystemPanic, "controller.DeleteWorkFlow")
	data, err := logic.ParsRequsetWorkFlowParam(r)
	tlog.Handler.Infof(context.TODO(), logs.DLTagProcessLog, "etype=controller.DeleteWorkFlow||data=%v||err=%v", data, err)
	if err != nil {
		logic.EchoJSON(w, r, &idl.ResponseInfo{Tag: false, ErrMsg: err.Error()})
	} else {
		if data.Operator == "" {
			ReturnLoginFailMessage(w, r)
		} else {
			logic.EchoJSON(w, r, workflowadmin.DeleteWorkflowConfig(data))
		}
	}
}

//导出workflow信息
func (h RPCService) ExportWorkFlow(w http.ResponseWriter, r *http.Request) {
	defer utils.Recover(context.TODO(), nil, logs.DLTagSystemPanic, "controller.ExportWorkFlow")
	data, err := logic.ParsRequsetWorkFlowParam(r)
	tlog.Handler.Infof(context.TODO(), logs.DLTagProcessLog, "etype=controller.ExportWorkFlow||data=%v||err=%v", data, err)
	if err != nil {
		logic.EchoJSON(w, r, &idl.ResponseInfo{Tag: false, ErrMsg: err.Error()})
	} else {
		if data.Operator == "" {
			ReturnLoginFailMessage(w, r)
		} else {
			logic.EchoJSON(w, r, workflowadmin.ExportWorkFlow(data))
		}
	}
}

// ImportWorkFlow 导入workflow信息
func (h RPCService) ImportWorkFlow(w http.ResponseWriter, r *http.Request) {
	//
	defer utils.Recover(context.TODO(), nil, logs.DLTagSystemPanic, "controller.ImportWorkFlow")
	// 获取流程图信息和操作者信息，以及workflowId
	dataJson := logic.CancelEmptyStr(r.FormValue("dataJson"))
	username, _ := r.Cookie("username")
	var operator string
	if username != nil {
		operator = logic.CancelEmptyStr(username.Value)
	}
	workflowId, _ := strconv.ParseInt(r.FormValue("workflowid"), 10, 64)
	//
	tlog.Handler.Infof(context.TODO(), logs.DLTagProcessLog, "etype=controller.importWorkFlow||data=%v", dataJson)

	if operator == "" {
		ReturnLoginFailMessage(w, r)
	} else {
		workflowChart := new(idl.WorkflowChart)
		err := json.Unmarshal([]byte(dataJson), &workflowChart)
		if err != nil {
			logic.EchoJSON(w, r, &idl.ResponseInfo{Tag: false, ErrMsg: err.Error()})
		} else {
			logic.EchoJSON(w, r, workflowadmin.SaveImportWorkFlowChart(workflowChart, workflowId, operator))
		}
	}

}

//获取流程图信息
func (h RPCService) GetWorkFlowChart(w http.ResponseWriter, r *http.Request) {
	defer utils.Recover(context.TODO(), nil, logs.DLTagSystemPanic, "controller.GetWorkFlowChart")
	data, err := logic.ParsRequsetWorkFlowParam(r)
	tlog.Handler.Infof(context.TODO(), logs.DLTagProcessLog, "etype=controller.getWorkFlowChart||data=%v||err=%v", data, err)
	if err != nil {
		logic.EchoJSON(w, r, &idl.ResponseInfo{Tag: false, ErrMsg: err.Error()})
	} else {
		if data.Operator == "" {
			ReturnLoginFailMessage(w, r)
		} else {
			logic.EchoJSON(w, r, workflowadmin.GetWorkFlowChart(data))
		}
	}
}

//保存流程图修改
func (h RPCService) SaveWorkFlowChart(w http.ResponseWriter, r *http.Request) {
	defer utils.Recover(context.TODO(), nil, logs.DLTagSystemPanic, "controller.SaveWorkFlowChart")
	dataJson := logic.CancelEmptyStr(r.FormValue("dataJson"))
	operator := logic.CancelEmptyStr(r.FormValue("operator"))
	err := logic.CheckParam(r.FormValue("workflowid"))
	if err != nil {
		logic.EchoJSON(w, r, &idl.ResponseInfo{Tag: false, ErrMsg: fmt.Errorf("实验编号需要是数字").Error()})
	}
	workflowId, _ := strconv.ParseInt(r.FormValue("workflowid"), 10, 64)
	tlog.Handler.Infof(context.TODO(), logs.DLTagProcessLog, "etype=controller.saveWorkFlowChart||data=%v", dataJson)

	flowChart := new(idl.ChartG6)
	err = json.Unmarshal([]byte(dataJson), &flowChart)
	if err != nil {
		logic.EchoJSON(w, r, &idl.ResponseInfo{Tag: false, ErrMsg: err.Error()})
	} else {
		if operator == "" {
			ReturnLoginFailMessage(w, r)
		} else {
			logic.EchoJSON(w, r, workflowadmin.SaveWorkFlowChart(flowChart, workflowId, operator))
		}
	}
}
