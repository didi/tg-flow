/**
 * This file is auto-generated by dirpcgen don't modify manaully
 *
 * Copyright (c) 2018 didichuxing.com, Inc. All Rights Reserved
 *
 * Generated-date: 2018-07-13
 */

package router

import (
	lego "git.xiaojukeji.com/lego/context-go"
	"github.com/didi/tg-flow/tg-core/common/tlog"
	"github.com/didi/tg-flow/tg-core/conf"
	ngs "git.xiaojukeji.com/nuwa/nuwa-go-httpserver/v2"
	"git.xiaojukeji.com/nuwa/nuwa-go-httpserver/v2/middleware"
	"log"
	"net/http"
)

var Handler ngs.Route
var IdlHandler *ngs.IDLHandler

func init() {
	log.Println("tg-core router init start...")
	Handler = ngs.NewRouter()
	logLimit, err := conf.Handler.GetBoolSetting("log", "log_limit")
	tlog.Handler.RegisterContextFormat(lego.FormatCtx)
	if err == nil && logLimit {
		Handler = Handler.Use(
			middleware.RecoveryWithConfig(middleware.RecoveryConfig{tlog.Handler}),
			middleware.TraceWithConfig(middleware.TraceConfig{Log: nil}),
			middleware.RateLimitWithConfig(middleware.RateLimitConfig{Log: tlog.Handler, RateLimitKeyName: conf.RateLimitName}))
	} else {
		Handler = Handler.Use(
			middleware.RecoveryWithConfig(middleware.RecoveryConfig{tlog.Handler}),
			middleware.TraceWithConfig(middleware.TraceConfig{Log: tlog.Handler}),
			middleware.RateLimitWithConfig(middleware.RateLimitConfig{Log: tlog.Handler, RateLimitKeyName: conf.RateLimitName}))
	}
	IdlHandler = ngs.NewDiRPC(tlog.Handler)
	Handler.GET("/checkstatus", func(writer http.ResponseWriter, request *http.Request) {
		writer.WriteHeader(200)
	})
}

func AddRouter(requestType string, routerPath string, handlerMethod interface{}) {
	Handler.Handler(requestType, routerPath, IdlHandler.Handle(handlerMethod))
}
